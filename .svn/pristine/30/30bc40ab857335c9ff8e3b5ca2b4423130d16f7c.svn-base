<?php


namespace Oa\Controller;

//use Zend\Mvc\Controller\AbstractActionController;
use Oa\Tools\Utils;
use Zend\Db\Sql\Where;
use Zend\Db\Sql\Select;
use Zend\View\Model\ViewModel;
use Oa\Controller\BaseController;
use Oa\Model\Record;
use Oa\Model\RecordTable;
use Oa\Model\Typeinfo;
use Oa\Model\TypeinfoTable;
use Zend\Json\Json;
class RecordController extends BaseController
{

    //考勤记录首页
    public function indexAction()
    {

        $where = array();
        $pagenum = (int)$this->params()->fromRoute('id', 1);
        $formInfo = array();
        
       $in = new Where();

        //类型
        if(isset($_GET['type']) && $_GET['type'] == 3) {
            //事假及未签到
            $inOr = new Where();
            $inOr->in('updateType1', array('E','emp'));
            $inOr->or->in('updateType2',array('emp'));
            $in->addPredicate($inOr);
            array_push($where, $in);
            $formInfo['type'] = 3;
        }else if(isset($_GET['type']) && $_GET['type'] == 2){
            //全部
            $formInfo['type'] =2;
        }else
        {
            //迟到及早退
            $in->in('updateType1',array('B','C','D','F'));
            array_push($where, $in);
            $formInfo['type'] = 1;
        }
//提交时间区间
        if (isset($_GET['starttime']) && strlen($_GET['starttime']) > 0 && isset($_GET['endtime']) && strlen($_GET['endtime']) > 0) {

            $in->between('signdate', $_GET['starttime'], $_GET['endtime']);
            array_push($where, $in);
            $formInfo['starttime'] = $_GET['starttime'];
            $formInfo['endtime'] = $_GET['endtime'];
        }
        //姓名
        if (isset($_GET['name']) && strlen($_GET['name']) > 0) {
            array_push($where, array('name' => $_GET['name']));
            $formInfo['name'] = $_GET['name'];
        }elseif (isset($_GET['employeeId']) && strlen($_GET['employeeId']) > 0) {
            //员工号
            array_push($where, array('employeeId' => $_GET['employeeId']));
            $formInfo['employeeId'] = $_GET['employeeId'];
        }

        $order = array('signdate desc','employeeId');

        $paginator = $this->common->getRecordTable()->getPaginator( $where , $order);
        $paginator->setCurrentPageNumber($pagenum);
        $paginator->setItemCountPerPage(8);

        $typeinfos = $this->common->getRuleTable()->fetchAll()->toArray();
        $typeinfos = $this->common->array_column($typeinfos,null,'typeDesc');

        $user = $this->common->getUserTable()->fetchAll()->toArray();
        $user = $this->common->array_column($user,null,'employeeId');
        $fixValue = array('em'=>'无记录','emp'=>'未打卡','00'=>'数据异常','sun'=>'周日值守','01'=>'法定假日1','02'=>'法定假日2','A11'=>'法定假日0.5','01H'=>'0.5法定假日加班1','01I'=>'0.5法定假日加班2');
        return new ViewModel(array(
            'infos' => $paginator,
            'typeinfos' => $typeinfos,
            'formInfo' => $formInfo,
            'user'=>$user,
            'num' => $pagenum,
            'fixValue' => $fixValue
        ));
    }
   //生成报表页面
   public function generateAction() {
       return new ViewModel();
   }
   //调整法定假日页面
   public function adjustpageAction() {
       return new ViewModel();
   }
    //对工作日期类型进行修改
    public function updateAction()
    {

        if(!$this->getRequest()->isPost()) {
            throw new \Oa\Exception\ErrorException('访问出错');
        }
        $update1Type = $_POST['update1Type'];
        $update2Type = $_POST['update2Type'];
        $desc = $_POST['desc'];
        $id = $_POST['id'];

        $record = $this->common->getRecordTable()->fetchOne(array('id'=>$id));

        $record->updateType1 = $update1Type;
        $record->updateType2 = $update2Type;
        $record->description = $desc;
        try{
            $this->common->getRecordTable()->saveAs($record);
            echo 'success';
            die();
        }catch (\Exception $e)
        {

            $this->common->getRecordTable()->logger->info("考勤记录单条记录提交修改时出错：".$e->getMessage());
            echo 'fail';
            die();
        }

    }

    public function updateallAction() {
        if(!$this->getRequest()->isPost()) {
            throw new \Oa\Exception\ErrorException('访问出错');
        }
        $idString = $_POST['ids'];

        $ids = explode(';', $idString);
        $val1 = explode(';', $_POST['val1']);
        $val2 = explode(';', $_POST['val2']);
        $desc = explode(':',$_POST['desc']);
        
        $wArray = array();
        $where = new Where();
        $where->in('id',$ids);
        $wArray[]= $where;
         $records = $this->common->getRecordTable()->fetchAll($wArray)->toArray();
        $conn = $this->getAdapter()->getDriver()->getConnection();
        $conn->beginTransaction();
        try {
        foreach ($records as $key => $value) {
            $index = array_search($value['id'], $ids);

            $data ['updateType1'] = $val1[$index];
            $data ['updateType2'] = $val2[$index];
            $data ['description'] = $desc[$index];
            $this->common->getRecordTable()->update($data,array('id'=>$value['id']));
        }

            $conn->commit();
            echo 'success';
            die();
        }catch (\Exception $e)
        {
            $conn->rollback();
            $this->common->getRecordTable()->logger->info("考勤记录页面提交修改时出错：".$e->getMessage());
            echo 'fail';
            die();
        }
        
    }



   //删除操作
    public function deleteAction()
    {
        $pageNum = $this->params()->fromRoute('id',1);
        $ids = $_POST['post'];

        $where = new Where();
        $where->in('id',$ids);
        $this->common->getRecordTable()->delete($where);
         return   $this->forward()->dispatch('OA/Controller/record',array('action'=>'index'));
    }



    //调整工作日与法定假日
    public function adjustAction()
    {
        if(!$this->getRequest()->isPost())
        {
            throw new \Oa\Exception\ErrorException('请以正确的方式访问');
        }
        $day = $_POST['day'];
        $daytype = $_POST['type'];

        $records = $this->common->getRecordTable()->fetchAll(array('signdate'=>$day))->toArray();
        if(!$records || empty($records)) {
            echo '没有该日期记录';
            die();
        }
        $userInfo = $this->common->getUserTable()->fetchAll()->toArray();
        $userInfo = $this->common->array_column($userInfo,null,'employeeId');
        $records = $this->common->array_column($records, null, 'id');

        $recordRow = new Record();
        $conn = $this->getAdapter()->getDriver()->getConnection();
        $conn->beginTransaction();
        try {

            foreach ($records as $k => $v) {
            if(empty($userInfo[$v['employeeId']]))
            {
                $this->common->getRecordTable()->logger->info("员工登录表中没有对应的员工号". $v['employeeId']);
                continue;
            }


           foreach ($v as $key => $value) {
                if ($key == 'inputFilter') {
                    continue;
                }
                $recordRow->$key = $value;
            }

            if ($daytype == 1) {
                $role = $userInfo[$v['employeeId']]['role'];
                $updateType1 = $v['updateType1'];
                $updateType2 = $v['updateType1'];
                if ($role == 1 || $role == 2) {
                    //调整为工作日，管理员和普通员工
                    if(!empty($v['time1']))
                    {
                        $updateType1 = $this->common->getTypeDesc(strtotime($v['time1']),1);
                    }
                    if(!empty($v['time2'])) {
                        $updateType2 = $this->common->getTypeDesc(strtotime($v['time2']),1);
                    }
                } else if ($role == 3) {
                    //保洁人员调整为工作日
                    if(!empty($v['time1']))
                    {
                        $updateType1 = $this->common->getTypeDesc(strtotime($v['time1']),3);
                    }
                    if(!empty($v['time2'])) {
                        $updateType2 = $this->common->getTypeDesc(strtotime($v['time2']),3);
                    }

                }
                $recordRow->daytype = 1;
                $recordRow->time1Type = $updateType1;
                $recordRow->time2Type = $updateType2;
                $recordRow->updateType1 = $updateType1;
                $recordRow->updateType2 = $updateType2;
                $this->common->getRecordTable()->saveAs($recordRow);
                continue;
            } else if ($daytype == 3) {
                //调整为法定假日1
                $recordRow->daytype = 3;
                if(!empty($v['time1']) || !empty($v['time2']))
                {
                    $updateType1 = '01';
                    $updateType2 = '01';
                    $recordRow->updateType1 = $updateType1;
                    $recordRow->updateType2 = $updateType2;
                }else {
                    $recordRow->updateType1 = 'em';
                    $recordRow->updateType2 = 'em';
                }
                $this->common->getRecordTable()->saveAs($recordRow);
                continue;
            } else if ($daytype == 4) {
                //调整为法定假日2
                $recordRow->daytype = 4;
                if(!empty($v['time1']) || !empty($v['time2']))
                {
                    $updateType1 = '02';
                    $updateType2 = '02';
                    $recordRow->updateType1 = $updateType1;
                    $recordRow->updateType2 = $updateType2;

                }else {
                    $recordRow->updateType1 = 'em';
                    $recordRow->updateType2 = 'em';
                }

                    $this->common->getRecordTable()->saveAs($recordRow);

            }

            }
            $conn->commit();
            echo 'success';
            die();
            }catch (\Exception $e)
            {
                $conn->rollback();
                $this->common->getRecordTable()->logger->info("调整假日时出错：".$e->getMessage());
                echo 'fail';
                die();
            }

    }



//免责处理
    public function mianAction() {
        if($this->getRequest()->isPost()) {
            set_time_limit(600);
            $type = $_POST['type'];
            $datetime = strtotime($_POST['datetime']);
              // $type = 2;$datetime = strtotime('2016-01-06 15:00:00');
            //天
            $date = date('Y-m-d',$datetime);


            //查询用户信息，获取角色
            $userInfo = $this->common->getUserTable()->fetchAll()->toArray();
            $userInfo = $this->common->array_column($userInfo,null,'employeeId');
            //获取下午下班时间点

                if($type == 1)
                {
                    $w = array();
                    $where = new Where();
                    $where->in('updateType1',array('B','C','D','E','K'));
                    $w[]= $where;
                    $w[] = array('signdate'=>$date);
                    $records =  $this->common->getRecordTable()->fetchAll($w)->toArray();
                    foreach($records as $key=>$value) {
                        if ($userInfo[$value['employeeId']]['role'] == 4 || $userInfo[$value['employeeId']]['role'] == 3) {
                            continue;
                        }
                        $updateType1 = $value['updateType1'];

                        if (!$records || empty($records)) {
                            echo '没有该日期记录';
                            die();
                        }
                        if ($value['daytype'] == 1) {  //上午免责并且是工作日

                            if (!empty($value['time1']) && strtotime($value['time1']) <= $datetime) {
                                //上午免责
                                $updateType1 = 'A';
                            }
                        } elseif ($value['daytype'] == 2) {
                            if (!empty($value['time1']) && strtotime($value['time1']) <= $datetime) {
                                //周末上午免责
                                $updateType1 = 'J';
                            }
                        }
                        $data['updateType1'] = $updateType1;

                        $this->common->getRecordTable()->update($data,array('id'=>$value['id']));
                    }
                }else {
                    $w = array();
                    $where = new Where();
                    $where->in('updateType2', array('F', 'L', 'emp'));
                    $w[] = $where;
                    $w[] = array('signdate' => $date);

                    $records = $this->common->getRecordTable()->fetchAll($w)->toArray();
                    if (!$records || empty($records)) {
                        echo '没有该日期记录';
                        die();
                    }
                    foreach ($records as $key => $value) {
                        if ($userInfo[$value['employeeId']]['role'] == 4 || $userInfo[$value['employeeId']]['role'] == 3) {
                            continue;
                        }

                        $updateType2 = $value['updateType2'];


                        if ($value['daytype'] == 1) {
                            if ($value['updateType2'] == 'F' || $value['updateType2'] == 'emp') {
                                $updateType2 = 'G';
                            }

                        } elseif ($value['daytype'] == 2) {
                            $updateType2 = 'N';
                        }

                        $data['updateType2'] = $updateType2;
                        $this->common->getRecordTable()->update($data, array('id' => $value['id']));
                    }
                }
            echo 'success';
            die();
        }


        return array();
    }

    //调整半天假日
    public function halfAction() {
        if(!$this->getRequest()->isPost()){
            throw new \Oa\Exception\ErrorException('请以正确的方式访问');
        }
        try {
            $conn = $this->getAdapter()->getDriver()->getConnection();
            $conn->beginTransaction();
            $date = $_POST['halfDay'];
            $dayType = $_POST['dayType'];
            $role = $_POST['role'];
            //获取非保洁和非晚勤人员的员工号
            $where = array();
            $userWhere = new Where();
            $userWhere->in('role',array(1,2));
            $where[0] = $userWhere;
            $user = $this->common->getUserTable($where)->fetchAll()->toArray();
            $user = $this->common->array_column($user,null,'employeeId');
            $userEmployee = array_keys($user);

            if ($role == 1) {
                //三八节
                $where = array();
                $eWhere = new Where();
                $eWhere->in('employeeId',$userEmployee);
                $where[0] = $eWhere;
                $where[1] = array('sex' => '女');
                $userInfo = $this->common->getUserinfoTable()->fetchAll($where)->toArray();
                $userInfo = $this->common->array_column($userInfo,null,'employeeId');
                $employeeIdArray = array_keys($userInfo);
                $oWhere = array();
                $w = new Where();
                $w->in('employeeId', $employeeIdArray);
                $oWhere[0] = $w;
                $oWhere[1] = array('signdate' => $date);
                $record = $this->common->getRecordTable()->fetchAll($oWhere)->toArray();
                foreach ($record as $item) {
                    if($dayType == 'am')
                    {   //上午放假
                        $data['updateType1'] = "A11";
                    }else {
                        //下午放假
                        if ($item['updateType2'] == 'H') {
                            $data['updateType2'] = '01H';
                        } elseif ($item['updateType2'] == 'I') {
                            $data['updateType2'] = '01I';
                        } else {
                            $data['updateType2'] = "A11";
                        }
                    }
                    $this->common->getRecordTable()->update($data, array('id' => $item['id']));
                }

            } else {
                $where = array();
                $eWhere = new Where();
                $eWhere->in('employeeId',$userEmployee);
                $where[0] = $eWhere;
                $userInfo = $this->common->getUserinfoTable()->fetchAll($where)->toArray();
                $userInfo = $this->common->array_column($userInfo, 'identify', 'employeeId');
                //计算年龄
                foreach ($userInfo as $key => $item) {
                    $identify = substr($item, 6, 8);
                    $year = substr($identify, 0, 4);
                    $month = substr($identify, 4, 2);
                    $day = substr($identify, 6, 2);
                    $now = date('Y-m-d');
                    $nowDate = explode('-', $now);
                    $yearDiff = $nowDate[0] - $year;
                    if ($nowDate[1] - $month < 0) {
                        $yearDiff--;
                    } elseif ($nowDate[1] - $month == 0) {
                        if ($nowDate[2] - $day < 0)
                            $yearDiff--;
                    }
                    $userInfo[$key] = $yearDiff;
                }
                $employeeId = array_keys($userInfo);
                $oWhere = array();
                $w = new Where();
                $w->in('employeeId', $employeeId);
                $oWhere[0] = $w;
                $oWhere[1] = array('signdate' => $date);
                $record = $this->common->getRecordTable()->fetchAll($oWhere)->toArray();
                foreach ($record as $item) {
                    $age = $userInfo[$item['employeeId']];
                    if ($age <= 28) {
                        if($dayType == 'am')
                        {   //上午放假
                            $data['updateType1'] = "A11";
                        }else {
                            //下午放假
                            if ($item['updateType2'] == 'H') {
                                $data['updateType2'] = '01H';
                            } elseif ($item['updateType2'] == 'I') {
                                $data['updateType2'] = '01I';
                            } else {
                                $data['updateType2'] = "A11";
                            }
                        }

                        $this->common->getRecordTable()->update($data, array('id' => $item['id']));

                    }
                }
            }
            $conn->commit();
            echo 'success';
            die();
        }catch (\Exception $e) {
            $conn->rollback();
            $this->common->getRecordTable()->logger->err($e->getMessage());
            echo '亲，出错了';
            die();
        }
    }
}
